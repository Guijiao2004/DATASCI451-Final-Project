posterior_samples <- extract(fit)
alpha_samples <- posterior_samples$alpha[, new_data$Country_id]    # vector of MCMC samples for alpha[c]
beta_samples  <- posterior_samples$beta          # matrix: iterations Ã— 4 (or list of vectors)
phi_samples   <- posterior_samples$phi     # vector of MCMC samples for phi
# Calculate log(lambda)
log_lambda <- alpha_samples +
beta_samples[,1] +
beta_samples[,2] * new_data$X.Athletes +
beta_samples[,3] * new_data$IsHost
# Calculate lambda
lambda_pred <- exp(log_lambda)
# Generate predictions from Poisson distribution
set.seed(451)  # for reproducibility
total_pred <- rnbinom(n = length(lambda_pred),
size = phi_samples,
mu = lambda_pred)
return(total_pred)
}
# Predict the medals for 2024
predict_2024 <- function(
gold_fit,
silver_fit,
bronze_fit,
new_data
) {
# 1. Predict the medals using the posterior predictive distribution
gold_pred   <- post_pred(gold_fit, new_data)
silver_pred <- post_pred(silver_fit, new_data)
bronze_pred <- post_pred(bronze_fit, new_data)
# Create the directory for saving figures
dir.create(file.path("figures", new_data$NOC), showWarnings = FALSE, recursive = TRUE)
# 2. Plot the posterior predictive distribution
save_hist <- function(pred_values, medal_type = "Gold") {
pdf_file <- file.path("figures", new_data$NOC, paste0(tolower(medal_type), "_predictions.pdf"))
pdf(pdf_file, width = 8, height = 6)
plotPost(pred_values, xlab = paste(medal_type, "Medals"),
main = paste("Predicted", medal_type, "Medals for", new_data$NOC, "in 2024"),
)
dev.off()
}
# 3. Plot for each medal type
save_hist(gold_pred,   medal_type = "Gold")
save_hist(silver_pred, medal_type = "Silver")
save_hist(bronze_pred, medal_type = "Bronze")
# 4. Return the summary
out_list <- list(
country = new_data$NOC,
gold_pred = gold_pred,
silver_pred = silver_pred,
bronze_pred = bronze_pred
)
return(invisible(out_list))
}
# Predict for USA
usa_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,
new_data = olympics_2024[olympics_2024$NOC == "USA", ]
)
# Predict for CHN
chn_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,
new_data = olympics_2024[olympics_2024$NOC == "CHN", ]
)
# Predict for JPN
gbr_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,?
new_data = olympics_2024[olympics_2024$NOC == "JPN", ]
)
# Predict the medals for 2024
predict_2024 <- function(
gold_fit,
silver_fit,
bronze_fit,
new_data
) {
# 1. Predict the medals using the posterior predictive distribution
gold_pred   <- post_pred(gold_fit, new_data)
silver_pred <- post_pred(silver_fit, new_data)
bronze_pred <- post_pred(bronze_fit, new_data)
# Create the directory for saving figures
dir.create(file.path("figures", new_data$NOC), showWarnings = FALSE, recursive = TRUE)
# 2. Plot the posterior predictive distribution
save_hist <- function(pred_values, medal_type = "Gold") {
pdf_file <- file.path("figures", new_data$NOC, paste0(tolower(medal_type), "_predictions.pdf"))
pdf(pdf_file, width = 8, height = 6)
plotPost(pred_values, xlab = paste(medal_type, "Medals"),
main = paste("Predicted", medal_type, "Medals for", new_data$NOC, "in 2024"),
)
dev.off()
}
# 3. Plot for each medal type
save_hist(gold_pred,   medal_type = "Gold")
save_hist(silver_pred, medal_type = "Silver")
save_hist(bronze_pred, medal_type = "Bronze")
# 4. Return the summary
out_list <- list(
country = new_data$NOC,
gold_pred = gold_pred,
silver_pred = silver_pred,
bronze_pred = bronze_pred
)
return(invisible(out_list))
}
# Predict for USA
usa_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,
new_data = olympics_2024[olympics_2024$NOC == "USA", ]
)
# Predict for CHN
chn_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,
new_data = olympics_2024[olympics_2024$NOC == "CHN", ]
)
# Predict for JPN
gbr_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,
new_data = olympics_2024[olympics_2024$NOC == "JPN", ]
)
# Predict for AUS
aus_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,
new_data = olympics_2024[olympics_2024$NOC == "AUS", ]
)
# Predict for FRA
fra_pred <- predict_2024(
gold_fit,
silver_fit,
bronze_fit,
new_data = olympics_2024[olympics_2024$NOC == "FRA", ]
)
# Analysis of the Silver Model
pdf("figures/silver_model.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/silver_model_alpha.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]"),
prob = 0.95,
)
dev.off()
pdf("figures/silver_model_trace.pdf", width = 8, height = 6)
bayesplot::mcmc_trace(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
facet_args = list(ncol = 3)
)
dev.off()
pdf("figures/silver_model_hist.pdf", width = 8, height = 6)
bayesplot::mcmc_hist(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi")
)
dev.off()
summary(silver_fit)$summary
# Analysis of the Gold Model
pdf("figures/gold_model.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/gold_model_alpha.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]"),
prob = 0.95,
)
dev.off()
pdf("figures/gold_model_trace.pdf", width = 8, height = 6)
bayesplot::mcmc_trace(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
facet_args = list(ncol = 3),
)
dev.off()
pdf("figures/gold_model_hist.pdf", width = 8, height = 6)
bayesplot::mcmc_hist(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi")
)
dev.off()
summary(gold_fit)$summary
# Analysis of the Bronze Model
pdf("figures/bronze_model.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_alpha.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_beta.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_trace.pdf", width = 8, height = 6)
bayesplot::mcmc_trace(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
facet_args = list(ncol = 3)
)
dev.off()
pdf("figures/bronze_model_hist.pdf", width = 8, height = 6)
bayesplot::mcmc_hist(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi")
)
dev.off()
summary(bronze_fit)$summary
# Analysis of the Bronze Model
pdf("figures/bronze_model.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_alpha.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_beta.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_trace.pdf", width = 8, height = 6)
bayesplot::mcmc_trace(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
facet_args = list(ncol = 3)
)
dev.off()
pdf("figures/bronze_model_hist.pdf", width = 8, height = 6)
bayesplot::mcmc_hist(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi")
)
dev.off()
summary(bronze_fit)$summary
# Analysis of the Bronze Model
pdf("figures/bronze_model.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_alpha.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_beta.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(bronze_fit,
pars = c("beta[1]", "beta[2]", "beta[3]"),
prob = 0.95,
)
dev.off()
pdf("figures/bronze_model_trace.pdf", width = 8, height = 6)
bayesplot::mcmc_trace(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
facet_args = list(ncol = 3)
)
dev.off()
pdf("figures/bronze_model_hist.pdf", width = 8, height = 6)
bayesplot::mcmc_hist(bronze_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi")
)
dev.off()
summary(bronze_fit)$summary
# Analysis of the Silver Model
pdf("figures/silver_model.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/silver_model_alpha.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]"),
prob = 0.95,
)
dev.off()
pdf("figures/silver_model_beta.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(silver_fit,
pars = c("beta[1]", "beta[2]", "beta[3]"),
prob = 0.95,
)
dev.off()
pdf("figures/silver_model_trace.pdf", width = 8, height = 6)
bayesplot::mcmc_trace(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
facet_args = list(ncol = 3)
)
dev.off()
pdf("figures/silver_model_hist.pdf", width = 8, height = 6)
bayesplot::mcmc_hist(silver_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi")
)
dev.off()
summary(silver_fit)$summary
# Analysis of the Gold Model
pdf("figures/gold_model.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
prob = 0.95,
)
dev.off()
pdf("figures/gold_model_alpha.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]"),
prob = 0.95,
)
dev.off()
pdf("figures/gold_model_beta.pdf", width = 8, height = 6)
bayesplot::mcmc_areas(gold_fit,
pars = c("beta[1]", "beta[2]", "beta[3]"),
prob = 0.95,
)
dev.off()
pdf("figures/gold_model_trace.pdf", width = 8, height = 6)
bayesplot::mcmc_trace(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi"),
facet_args = list(ncol = 3),
)
dev.off()
pdf("figures/gold_model_hist.pdf", width = 8, height = 6)
bayesplot::mcmc_hist(gold_fit,
pars = c("alpha[1]", "alpha[2]", "alpha[3]", "alpha[4]", "alpha[5]", "beta[1]", "beta[2]", "beta[3]", "phi")
)
dev.off()
summary(gold_fit)$summary
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
library(bayesboot)
library(bayesplot)
options(mc.cores = 4)
olympics <- read.csv('01_data_preprocessing/data/olympics.csv')
olympics$X.Athletes <- log(olympics$X.Athletes + 1)
# Held out 2024
olympics_2024 <- olympics[olympics$Year == 2024, ]
olympics <- olympics[olympics$Year != 2024, ]
olympics_2024
# Histogram of X.Athlete for each country
par(mfrow = c(2, 3))
hist(olympics[olympics$Country_id == 1,]$X.Athletes,
main = "USA",
xlab = "Number of Athletes",
col = "skyblue",
border = "white")
hist(olympics[olympics$Country_id == 2,]$X.Athletes,
main = "CHN",
xlab = "Number of Athletes",
col = "skyblue",
border = "white")
hist(olympics[olympics$Country_id == 3,]$X.Athletes,
main = "GBR",
xlab = "Number of Athletes",
col = "skyblue",
border = "white")
hist(olympics[olympics$Country_id == 4,]$X.Athletes,
main = "AUS",
xlab = "Number of Athletes",
col = "skyblue",
border = "white")
hist(olympics[olympics$Country_id == 5,]$X.Athletes,
main = "FRA",
xlab = "Number of Athletes",
col = "skyblue",
border = "white")
pdf("figures/histogram_medals.pdf", width = 8, height = 8)
par(mfrow = c(3, 1), mar = c(4, 4, 2, 1), cex.main = 2, cex.lab = 1.5)
hist(olympics$Gold,
col = "skyblue",
border = "white",
main = "Gold Medals",
xlab = "Medals Counts",
yaxt = "n",
ylab = "")
text(x = max(olympics$Gold) * 0.738,
y = max(hist(olympics$Gold, plot = FALSE)$counts * 0.8),
labels = paste("Mean =", round(mean(olympics$Gold), 2),
"\nVar =", round(var(olympics$Gold), 2)),
col = "red", cex = 1.5, adj = 0)
hist(olympics$Silver,
col = "skyblue",
border = "white",
main = "Silver Medals",
xlab = "Medals Counts",
yaxt = "n",
ylab = "")
text(x = max(olympics$Silver) * 0.78,
y = max(hist(olympics$Silver, plot = FALSE)$counts * 0.8),
labels = paste("Mean =", round(mean(olympics$Silver), 2),
"\nVar =", round(var(olympics$Silver), 2)),
col = "red", cex = 1.5, adj = 0)
hist(olympics$Bronze,
col = "skyblue",
border = "white",
main = "Bronze Medals",
xlab = "Medals Counts",
yaxt = "n",
ylab = "")
text(x = max(olympics$Bronze) * 0.71,
y = max(hist(olympics$Bronze, plot = FALSE)$counts * 0.8),
labels = paste("Mean =", round(mean(olympics$Bronze), 2),
"\nVar =", round(var(olympics$Bronze), 2)),
col = "red", cex = 1.5, adj = 0)
dev.off()
host_avg <- with(olympics, tapply(Total, IsHost, mean, na.rm = TRUE))
pdf("figures/IsHost.pdf", width = 6, height = 4)
barplot(host_avg,
col       = "skyblue",
names.arg = c("0", "1"),
main      = "Host vs Non-Host medals",
xlab      = "IsHost (0 = No, 1 = Yes)",
ylab      = "Average Total Medals",
border    = "white")
dev.off()
stan_model_code <- "
data {
int<lower=0> N; // number of observations
int<lower=0> C; // number of countries
int<lower=0> Y; // number of years
array[C, Y] int<lower=0> Total; // total medals
array[C, Y] real<lower=0> N_athletes; // number of athletes
array[C, Y] int<lower=0, upper=1> IsHost; // host country
}
parameters {
array[C] real alpha; // country-specific intercepts
array[3] real beta; // coefficients for predictors
real<lower=0> phi; // dispersion parameter
}
model {
for (c in 1:C) {
for (y in 1:Y) {
Total[c, y] ~ neg_binomial_2_log(alpha[c] + beta[1] + beta[2] * N_athletes[c, y] + beta[3] * IsHost[c, y], phi);
}
}
// Priors
alpha ~ normal(0, 5);
phi ~ gamma(2, 0.1);
for (i in 1:3) {
beta[i] ~ normal(0, 5);
}
}
"
N = nrow(olympics)
C = length(unique(olympics$NOC))
Y = max(olympics$Year_id)
Gold = matrix(0, nrow = C, ncol = Y)
Silver = matrix(0, nrow = C, ncol = Y)
Bronze = matrix(0, nrow = C, ncol = Y)
N_athletes = matrix(0, nrow = C, ncol = Y)
IsHost = matrix(0, nrow = C, ncol = Y)
for (i in 1:C) {
country_data = olympics[olympics$Country == i, ]
for (j in 1:Y) {
year_data = country_data[country_data$Year_id == j, ]
if (nrow(year_data) > 0) {
Gold[i, j] = year_data$Gold
Silver[i, j] = year_data$Silver
Bronze[i, j] = year_data$Bronze
N_athletes[i, j] = year_data$X.Athletes
IsHost[i, j] = year_data$IsHost
}
}
}
gold_data_list = list(
N = N,
C = C,
Y = Y,
Total = Gold,
N_athletes = N_athletes,
IsHost = IsHost
)
silver_data_list = list(
N = N,
C = C,
Y = Y,
Total = Silver,
N_athletes = N_athletes,
IsHost = IsHost
)
bronze_data_list = list(
N = N,
C = C,
Y = Y,
Total = Bronze,
N_athletes = N_athletes,
IsHost = IsHost
)
model = stan_model(model_code = stan_model_code)
model = stan_model(model_code = stan_model_code)
model = stan_model(model_code = stan_model_code)
